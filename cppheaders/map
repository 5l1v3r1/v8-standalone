#ifndef __V8SA_MAP_HPP__
#define __V8SA_MAP_HPP__

#include <memory>
#include <functional>
#include <iterator>

namespace std {

template <class Key,
          class T,
          class Compare = less<Key>,
          class Alloc = allocator<pair<const Key, T> > >
class map {
public:
  typedef Key key_type;
  typedef T mapped_type;
  typedef pair<const key_type, mapped_type> value_type;
  typedef Compare key_compare;
  typedef Alloc allocator_type;
  typedef typename allocator_type::reference reference;
  typedef typename allocator_type::const_reference const_reference;
  typedef typename allocator_type::pointer pointer;
  typedef typename allocator_type::const_pointer const_pointer;
  typedef value_type * iterator;
  typedef const value_type * const_iterator;
  typedef typename iterator_traits<iterator>::difference_type difference_type;
  typedef typename iterator_traits<iterator>::difference_type size_type;
  
  explicit map(const key_compare & comp = key_compare(),
               const allocator_type & alloc = allocator_type());
  template <class InputIterator>
  map(InputIterator first, InputIterator last,
      const key_compare & comp = key_compare(),
      const allocator_type & alloc = allocator_type());
  map(const map & x);
  ~map();
  
  size_type size() const;
  
  // modifiers
  pair<iterator, bool> insert(const value_type & val);
  iterator insert(iterator position, const value_type & val);
  void erase(iterator position);
  size_type erase(const key_type & key);
  void erase(iterator first, iterator last);
  void clear();
  
  // accessors
  iterator begin();
  const_iterator begin() const;
  iterator end();
  const_iterator end() const;
  
  iterator upper_bound(const key_type & k);
  const_iterator upper_bound(const key_type & k) const;
  iterator lower_bound(key_type & k);
  const_iterator lower_bound(key_type & k) const;
};

}

#endif
